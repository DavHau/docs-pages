initSidebarItems({"derive":[["Deserialize",""],["Serialize",""],["SerializedBytes",""]],"enum":[["ActivityRequest","Get either the full activity or just the status of the chain"],["ChainStatus","Status of the agent activity chain"],["SerializedBytesError",""]],"macro":[["holochain_serial","unidiomatic way to derive default trait implementations of TryFrom in/out of SerializedBytes"]],"struct":[["AgentActivity","An agents chain elements returned from a agent_activity_query"],["ChainFork","The chain has been forked by these two headers"],["ChainHead","The header at the head of the complete chain. This is as far as this authority can see a chain with no gaps."],["ChainQueryFilter","Query arguments"],["HighestObserved","The highest header sequence observed by this authority. This also includes the headers at this sequence. If there is more then one then there is a fork."],["SerializedBytes","A Canonical Serialized Bytes representation for data If you have a data structure that needs a canonical byte representation use this Always round-trip through SerializedBytes via. a single TryFrom implementation. This ensures that the internal bytes of SerializedBytes are indeed canonical. The corrolary is that if bytes are NOT wrapped in SerializedBytes we can assume they are NOT canonical. Typically we need a canonical serialization when data is to be handled at the byte level by independently implemented and maintained systems."],["UnsafeBytes","UnsafeBytes the only way to implement a custom round trip through bytes for SerializedBytes It is intended to be an internal implementation in TryFrom implementations The assumption is that any code using UnsafeBytes is NOT valid messagepack data This allows us to enforce that all data round-tripping through SerializedBytes is via TryFrom and also allow for custom non-messagepack canonical representations of data types."]],"trait":[["Deserialize","A data structure that can be deserialized from any data format supported by Serde."],["Serialize","A data structure that can be serialized into any data format supported by Serde."],["TryFrom","Simple and safe type conversions that may fail in a controlled way under some circumstances. It is the reciprocal of [`TryInto`]."],["TryInto","An attempted conversion that consumes `self`, which may or may not be expensive."]]});