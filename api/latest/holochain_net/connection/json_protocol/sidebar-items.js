initSidebarItems({"enum":[["JsonProtocol","Enum holding all message types that serialize as json in the 'hc-core <-> P2P network module' protocol. There are 4 categories of messages:  - Command: An order from the local node to the p2p module. Local node expects a reponse. Starts with a verb.  - Handle-command: An order from the p2p module to the local node. The p2p module expects a response. Start withs 'Handle' followed by a verb.  - Result: A response to a Command. Starts with the name of the Command it responds to and ends with 'Result'.  - Notification: Notify that something happened. Not expecting any response. Ends with verb in past form, i.e. '-ed'. Fetch = Request between node and the network (other nodes) Get   = Request within a node between p2p module and core"]],"struct":[["ConfigData",""],["ConnectData",""],["DhtMetaData","Generic DHT metadata message"],["DropEntryData","Drop some data request from own p2p-module"],["DropMetaData","Drop some data request from own p2p-module"],["EntryData","Generic DHT data message"],["EntryListData",""],["FailureResultData",""],["FetchEntryData","Data Request from some other agent"],["FetchEntryResultData","DHT data response from a request"],["FetchMetaData","Metadata Request from another agent"],["FetchMetaResultData",""],["GetListData",""],["MessageData",""],["MetaListData",""],["PeerData",""],["StateData",""],["SuccessResultData",""],["TrackDnaData",""]],"type":[["MetaKey","(entry_address, attribute)"],["MetaTuple","Tuple holding all the info required for identifying a metadata. (entry_address, attribute, content) TODO: Content is supposed to be a HashString but for now its JSON because of how Core is currently handling Meta."]]});